{"version":3,"sources":["reducers.js","components/Card/Card.component.jsx","components/CardList/CardList.component.jsx","components/SearchBox/SearchBox.component.jsx","App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchField","initialStateMonsters","isPending","monsters","error","Card","name","id","email","className","src","alt","CardList","map","monster","key","SearchBox","searchChange","placeholder","onChange","type","App","this","props","onRequestMonsters","onSearchChange","filteredMonsters","filter","toLowerCase","includes","React","Component","connect","state","console","log","searchMonsters","requestMonsters","dispatch","event","payload","target","value","a","fetch","res","json","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"+UAOMA,EAAqB,CACzBC,YAAa,IAYTC,EAAuB,CAC3BC,WAAW,EACXC,SAAU,GACVC,MAAO,I,gDCVMC,G,MAVF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,oBAAoBC,IAAG,+BAA0BH,EAA1B,sBAAkDI,IAAG,oBAAeJ,KAC1G,wBAAIE,UAAU,sBAAsBH,GACpC,uBAAGG,UAAU,uBAAuBD,MCS3BI,G,MAZE,SAAC,GAAkB,IAAhBT,EAAe,EAAfA,SAClB,OACE,yBAAKM,UAAU,YAEXN,EAASU,KAAI,SAAAC,GACX,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAQP,GAAID,KAAMQ,EAAQR,KAAMC,GAAIO,EAAQP,GAAIC,MAAOM,EAAQN,cCA5EQ,G,MANG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAC/B,OACI,2BAAOT,UAAU,YAAYU,SAAUF,EAAcG,KAAK,SAASF,YAAaA,M,wBCoBlFG,G,kMAGFC,KAAKC,MAAMC,sB,+BAGH,IAAD,EACsDF,KAAKC,MAA1DrB,EADD,EACCA,UAAWF,EADZ,EACYA,YAAaG,EADzB,EACyBA,SAAUsB,EADnC,EACmCA,eACpCC,EAAmBvB,EAASwB,QAAO,SAAAb,GACvC,OAAOA,EAAQR,KAAKsB,cAAcC,SAAS7B,EAAY4B,kBAGzD,OAAI1B,EACK,wBAAIO,UAAU,gBAAd,WAGL,yBAAKA,UAAU,OACb,wBAAIA,UAAU,gBAAd,mBACA,kBAAC,EAAD,CAAWS,YAAY,kBAAkBD,aAAcQ,IACvD,kBAAC,EAAD,CAAUtB,SAAWuB,S,GAnBbI,IAAMC,YA2BTC,eA5CS,SAAAC,GAEtB,OADAC,QAAQC,IAAIF,GACL,CACLjC,YAAaiC,EAAMG,eAAepC,YAClCE,UAAW+B,EAAMI,gBAAgBnC,UACjCC,SAAU8B,EAAMI,gBAAgBlC,SAChCC,MAAO6B,EAAMI,gBAAgBjC,UAIN,SAAAkC,GACzB,MAAO,CACLb,eAAgB,SAAAc,GAAK,OAAID,ECdU,CACrClB,KCRiC,sBDSjCoB,QDYiDD,EAAME,OAAOC,SAC5DlB,kBAAmB,kBAAMc,ECVE,uCAAM,WAAOA,GAAP,iBAAAK,EAAA,6DACnCL,EAAS,CAAClB,KCX4B,6BDUH,kBAGfwB,MAAM,8CAHS,cAG3BC,EAH2B,gBAIVA,EAAIC,OAJM,OAI3B3C,EAJ2B,OAKjCmC,EAAS,CAAClB,KChB0B,2BDgBMoB,QAASrC,IALlB,kDAOjCmC,EAAS,CAAClB,KChByB,2BDgBMoB,QAAQ,EAAD,KAPf,0DAAN,2DDyChBR,CAA6CX,GGxCtD0B,EAASC,yBACTC,EAAcC,YAAgB,CAACd,ePHP,WAA0C,IAAzCH,EAAwC,uDAAlClC,EAAoBoD,EAAc,uDAAP,GAC9D,OAAOA,EAAO/B,MACZ,IMb+B,sBNc7B,OAAOgC,OAAOC,OAAO,GAAIpB,EAAO,CAAEjC,YAAamD,EAAOX,UACxD,QACE,OAAOP,IOFwCI,gBPYtB,WAA4C,IAA3CJ,EAA0C,uDAApChC,EAAsBkD,EAAc,uDAAP,GACjE,OAAOA,EAAO/B,MACZ,IM1BoC,2BN2BlC,OAAOgC,OAAOC,OAAO,GAAIpB,EAAO,CAAE/B,WAAW,IAC/C,IM7BoC,2BN8BlC,OAAOkD,OAAOC,OAAO,GAAIpB,EAAO,CAAE/B,WAAW,EAAOC,SAAUgD,EAAOX,UACvE,IM7BmC,2BN8BjC,OAAOY,OAAOC,OAAO,GAAIpB,EAAO,CAAE/B,WAAW,EAAOE,MAAO+C,EAAOX,UACpE,QACE,OAAOP,MOnBPqB,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAEFM,SAASC,eAAe,W","file":"static/js/main.e9f5b009.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_MONSTERS_FAILED,\r\n  REQUEST_MONSTERS_PENDING,\r\n  REQUEST_MONSTERS_SUCCESS\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchMonsters = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload })\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateMonsters = {\r\n  isPending: false,\r\n  monsters: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestMonsters = (state=initialStateMonsters, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_MONSTERS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_MONSTERS_SUCCESS:\r\n      return Object.assign({}, state, { isPending: false, monsters: action.payload });\r\n    case REQUEST_MONSTERS_FAILED:\r\n      return Object.assign({}, state, { isPending: false, error: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport './Card.style.scss';\r\n\r\nconst Card = ({ name, id, email }) => {\r\n  return (\r\n    <div className=\"Card\">\r\n      <img className=\"Card__monster-img\" src={`https://robohash.org/${id}/?set=set2&200x200`} alt={`robo-card-${id}`}></img>\r\n      <h3 className=\"Card__monster-name\">{name}</h3>\r\n      <p className=\"Card__monster-email\">{email}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from '../Card/Card.component';\r\nimport './CardList.styles.scss';\r\n\r\nconst CardList = ({ monsters }) => {\r\n  return (\r\n    <div className=\"CardList\">\r\n      {\r\n        monsters.map(monster => {\r\n          return <Card key={monster.id} name={monster.name} id={monster.id} email={monster.email}/>\r\n        })\r\n      }\r\n    </div>  \r\n  )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.styles.scss';\r\n\r\n\r\nconst SearchBox = ({ searchChange, placeholder }) => {\r\n    return (\r\n        <input className=\"SearchBox\" onChange={searchChange} type='search' placeholder={placeholder}></input>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from './components/CardList/CardList.component';\r\nimport SearchBox from './components/SearchBox/SearchBox.component';\r\nimport { searchChange, requestMonsters } from './actions';\r\n\r\nimport './App.scss'\r\n\r\nconst mapStateToProps = state => {\r\n  console.log(state)\r\n  return {\r\n    searchField: state.searchMonsters.searchField,\r\n    isPending: state.requestMonsters.isPending,\r\n    monsters: state.requestMonsters.monsters,\r\n    error: state.requestMonsters.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(searchChange(event.target.value)),\r\n    onRequestMonsters: () => dispatch(requestMonsters())\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestMonsters();\r\n  }\r\n\r\n  render() {\r\n    const { isPending, searchField, monsters, onSearchChange } = this.props;\r\n    const filteredMonsters = monsters.filter(monster => {\r\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    if (isPending) {\r\n      return <h1 className=\"App__heading\">Loading</h1>\r\n    } else {\r\n      return (\r\n        <div className=\"App\">\r\n          <h1 className=\"App__heading\">Monster Rolodex</h1>\r\n          <SearchBox placeholder=\"search monsters\" searchChange={onSearchChange}/>\r\n          <CardList monsters={ filteredMonsters }/>\r\n        </div>\r\n      )\r\n    }\r\n      \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_MONSTERS_FAILED,\r\n  REQUEST_MONSTERS_PENDING,\r\n  REQUEST_MONSTERS_SUCCESS\r\n} from './constants';\r\n\r\nexport const searchChange = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestMonsters = () => async (dispatch) => {\r\n  dispatch({type: REQUEST_MONSTERS_PENDING});\r\n  try {\r\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n    const monsters = await res.json();\r\n    dispatch({type: REQUEST_MONSTERS_SUCCESS, payload: monsters})\r\n  } catch (error) {\r\n    dispatch({type: REQUEST_MONSTERS_FAILED, payload: error})\r\n  }\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_MONSTERS_SUCCESS = 'REQUEST_MONSTERS_SUCCESS';\r\nexport const REQUEST_MONSTERS_PENDING = 'REQUEST_MONSTERS_PENDING';\r\nexport const REQUEST_MONSTERS_FAILED = 'REQUEST_MONSTERS_FAILDED';","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport { searchMonsters, requestMonsters } from './reducers';\r\n\r\nimport './sass/base/_index.scss';\r\n\r\nimport App from './App';\r\n\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchMonsters, requestMonsters});\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}